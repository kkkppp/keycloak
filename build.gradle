plugins {
    id 'java'
}

group = 'org.p2proto.keycloak'
version = '1.0.0'

repositories {
    mavenCentral()
}

ext {
    keycloakVersion = '24.0.2' // Replace with your Keycloak version
}

dependencies {
    // Keycloak Server SPI
    compileOnly "org.keycloak:keycloak-core:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-server-spi:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-server-spi-private:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-services:${keycloakVersion}"
    compileOnly "org.keycloak:keycloak-model-infinispan:${keycloakVersion}"

    // For test code that references Keycloak classes
    testImplementation "org.keycloak:keycloak-core:${keycloakVersion}"
    testImplementation "org.keycloak:keycloak-server-spi:${keycloakVersion}"
    testImplementation "org.keycloak:keycloak-server-spi-private:${keycloakVersion}"
    testImplementation "org.keycloak:keycloak-services:${keycloakVersion}"

    // Database Connector (e.g., MySQL)
    implementation 'org.postgresql:postgresql:42.6.0'

    // HikariCP for connection pooling
    implementation 'com.zaxxer:HikariCP:5.0.1'

    // SLF4J API and Logback for logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    runtimeOnly 'ch.qos.logback:logback-classic:1.4.11'

    // BCrypt for password hashing
    implementation 'org.mindrot:jbcrypt:0.4'

    // JUnit 5 API (for writing tests)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'

    // JUnit 5 Engine (so tests can be discovered and run)
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    // Mockito for mocking dependencies (connections, Keycloak classes, etc.)
    testImplementation 'org.mockito:mockito-core:5.5.0'

    // If you need the inline mock maker (for final classes), you can add:
    //testImplementation 'org.mockito:mockito-inline:5.5.0'

    // If you also need the JUnit Jupiter integration with Mockito:
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into layout.buildDirectory.dir("libs/external")
}

jar {
    dependsOn copyLibs
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
            'Implementation-Title': 'External DB User Storage Provider',
            'Implementation-Version': version,
            'Keycloak-Provider-Category': 'User Storage',
            'Keycloak-Provider-Id': 'external-db-user-storage',
            'Keycloak-Provider-Name': 'External Database User Storage Provider',
            'Keycloak-Provider-Version': version,
            'Keycloak-Provider-SPI-Classes': 'org.keycloak.storage.UserStorageProviderFactory'
        )
    }
    task dockerBuildImage(type: Exec) {
        dependsOn jar
        commandLine 'docker', 'build', '-t', 'keycloak_p', '-f', 'docker/Dockerfile', '.'
    }

    task dockerComposeUp(type: Exec) {
        dependsOn dockerBuildImage
        commandLine 'docker', 'compose', '-f', 'docker/compose.yaml', 'up', '-d'
    }

    task dockerComposeDown(type: Exec) {
        commandLine 'docker' ,'compose', '-f', 'docker/compose.yaml', 'down'
    }

    test {
        // Enable JUnit 5 support
        useJUnitPlatform()

        // (Optional) Show a more detailed test output
        testLogging {
            events "PASSED", "FAILED", "SKIPPED"
        }
    }
}
